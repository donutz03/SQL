sgbd a devenit mai accesibil prin limbaje procedurale si neprocedurale
sgbd e un ansamblu complex de programe ce asigura interfata intre o bd si utilizatorii acesteia
sgbd/dbms 

Orice organizare a datelor in mem. externa in colectii de date care nu are un sgbd asociat nu conduce la un SBD ci la fisiere
sau sisteme de fisiere prelucrate cu programe

minim un sgbd contine
- un model de date pt bd
- un limbaj de programare si interfete/instrumente pt gestionarea optima a datelor

roluri sgbd
- defineste si descrie bd
- incarca/valideaza datele
- realizeaza accesul pt operatii ca interogarea, consulatarea, actualizarea, editarea si situatii de iesire
- intretine bd prin editoare, utilitare - shells, navigatoare, convertoare etc
- protejeaza bd sub aspectul securitatii si integritatii datelor
sgbd relationale: oracle, informix, db2, visual foxpro, access
sgbd oo: gemstone, o2, jasmine

limbaje de descriere a datelor(ldd)
limbaje de manipulare a datelor(lmd)
limbaje de regasire neprocedurale (sql)

caracteristici sgbd:
- imbunatatirea acc. la date prin acces dupa mai multe chei, acces concurent, cresterea securitatii datelor
- utilizarea sgbd-urilor anterioare impreuna cu noile generatii


functiile sgbd: manipulare, utilizare, descriere, administrare bd;

LDD e foarte important. Exemplu descriere:
PROMPT crearea tabelelor
DROP TABLE cleinti CASCADE CONSTRAINTS;
DROP TABLE furnizori CASCADE CONSTRAINTS;
DROP TABLE produse CASCADE CONSTRAINTS;
DROP TABLE tranzactii CASCADE CONSTRAINTS;
DROP TABLE documente CASCADE CONSTRAINTS;
DROP TABLE proddoc CASCADE CONSTRAINTS;
CREATE TABLE clienti
(
codc varchar2 (5),
denc varchar2 (30),
adr varchar2 (30),
loc varchar2 (20),
constraint pk_codc primary key (codc)
);
CREATE TABLE furnizori
(
codf varchar2 (5),
denf varchar2 (30),
adr varchar2 (30),
loc varchar2 (20),
constraint pk_codf primary key (codf)
);
CREATE TABLE tranzactii
(
codt varchar2 (5),
dent varchar2 (1),
constraint nn_dent not null
constraint ck_dent check (upper (dent) in('L','R')),
dataora date default sysdate,
codf varchar2 (5),
codc varchar2 (5),
constraint pk_codt primary key (codt),
constraint fk_codf foreign key (codf) references furnizori (codf),
constraint fk_codc foreign key (codc) references clienti (codc)
);
CREATE TABLE documente
(
codd number (5)
constraint ck_codd check (codd > 0),
dend varchar2 (4)
constraint nn_dend not null
constraint ck_dend check (upper (dend) in ('FACT', 'AVIZ', 'NIR', 'CHIT')),
data date default sysdate,
codt varchar2 (5),
constraint pk_codd primary key (codd),
constraint fk_codt foreign key (codt) references tranzactii (codt)
);

CREATE TABLE proddoc
(
codd number(5),
codp varchar2(5),
um varchar2(5),
cat number(5),
constraint pk_coddp primary key
(cadd,codp)
);

Manipularea datelor
-fct de manipulare e cea mai complexa; se face cu aj. limbajului de manipulare a datelor (LMD)
- LMD efectueaza incarcarea, actualizarea, prelucrarea si regasirea datelor
Actualizarea consta in ops. de adaugare, modif si stergere inregistrari. 
Prelucrarea consta in ops. de selectie, ordonare, interclasare(compunere) si ventilare
(descompunere). 
Regasirea(interogarea) consta in operatii de vizualizare (punctuale, liste, rapoarte, grafice,
imagini, sunet, video).

Ex. INCARCARE: Sa se introduca in tabela Pontaj datele pentru noul angajat:
SQL > PROMPT
INSERT INTO Pontaj
(codang, luna, zilelucr, orezi, zileco, zilecm, orelucrate)
VALUES
('&CodAngajat, '&LunaPontaj', '&ZileLucr', '&ZileLucr', '&OrePeZi',
'&ZileConOdihna','&ZileConMed',' &OreLucrEfectiv');

Ex. ACTUALIZARE: Adaugati tabelei Proddoc, Restrictia de validare (cand >= 50)
SQL > PROMPT

ALTER TABLE proddoc ADD
(CONSTRAINT ck_cand CHECK (cant>=50));

Ex. PRELUCRARE: Sa se calc. si afis. val. tot. pt. fiecare doc. din tabela doc
SQL > UPDATE documente D
SET valoare = 
(
SELECT SUM (cant*pret) valoare FROM proddoc PD, 
produse P 
WHERE P.codp=PD.codp AND D.codd=PD.CODD
GROUP BY D.codd
);

Ex. VIZUALIZARE
SELECT codd, valoare FROM documente
WHERE valoare IS NOT NULL;

rez:
CODD      VALOARE
....      .....
20123        2.250E+09
10123        1.390E+09

MANIPULAREA DATELOR
LMD, fct. de manip. a datelor de cea mai fol. si cea mai bine suportata de SGBD
SGBD-ul manip. datele in mod eficient din generatie in generatie

LMD cu limbaj gazda (cobol, pascal, c), se imbina cu oracle

limbajele relationale (sql) au cele mai bune performante

UTILIZAREA BD
- fct de utilizare asigura interfetele necesare pt comunicarea tuturor utilizatorilor cu bd. SGBD trb sa asigure facilitati
pentru: neinformaticieni, specialisti (informaticieni), administratorul. Neinformaticienii sunt principala categorie a 
beneficiarilor de informatii. SGBD le ofera facilitati de interogare(generatoare, utilitare).

Pt specialistii in info, SGBD ofera elemente de CASE (Computer Aidede Software Engineering)

Administratorul BD organizeaza BD conform unei anumite metodologii, realizeaza schema conceptuala bd, coordoneaza proiecta-
rea bazei de date. Adminul acorda conturi, parole, etc, reface bd in caz de incidente, face analize statistice.

Privilegiile DBA (Database Administrator) - componenta estentiala a managementului BD
1. cont de administrator pentru sistemul de operare
2. Cont de administrator BD
3. Rol de DBA

Moduri de autentificare a DBA:
1. Autentificare folosind SO
2. Autentificare folosind fisierul de parole

Administrarea bd cu ajutorul enterprise manager. 
Pentru a deschide pagina Enterprise Manager se foloseste un browser web

Tipologia SGBD-urilor
1) dupa sistemele de calcul pe care le implementeaza
pt calc. mari se folosesc bd complexe si foarte mari (Oracle, DB2, IMS)
pt minicalc. se fol. bd de complexe si mari dar si mici si medii (ex foxpro, oracle, access)
Tendinta e ca SGBD sa fie compatibil cu cat mai multe SO. (se real. aplicatii de tip sisteme deschise, lucru de care tine
cont si noua generatie, a treia, de SGBD-uri).

2) dupa limbajul de programare utilizat
SGBD cu limbaj gazda are LMD-ul bazat pe un limbaj de nivelintalt universal (C, java, pascal, cobol) sau o extensie/adaptare
a unui astfel de limbaj.
Avantaje: proceduri/interfete om-masina f bune, se utilizeaza toate avantajele programarii procedurale
Dezavatajul major e ca formularea cererilor de regasire se face mai greu, de multe ori intr-un mod inaccesibil utilizatorilor
finali.
SGBD cu limbaj propriu(autonom) e cel care are un LMD specific. Acest LMD este procedural si are marele avantaj ca permite 
implementarea tuturor facilitatilor complexe oferite de SGBD. Se realizeaza in plus si acces usor si optimizat la bd, pe
langa procedurile complexe si interfetele puternice pe care le ofera. 
Dezavantaj: un astfel de limbaj poate fi utilizat doar de specialistii in informatica (exemplu limbajul din Visual FoxPro).
Tendinta actuala este ca SGBD-ul sa aiba implementat pe langa un limbaj procedural si un limbaj de regasire neprocedural care 
sa permita formularea de cereri de regasire usor de catre toti utilizatorii bazei de date.
Majoritatea SGBD au implementat pt microcalculatoare limbajul SQL care e si standardizat international.

3) dupa modelul logic de date implementat.
SGBD ierarhice sunt cele care implementeaza modelul de date arborescent (ierarhic) si au fost primele. Sunt bune pt domenii
precise din lumea reala, precum tehnologia constructiei de masini, dar au limite in alte domenii (exemplu: IMS).
SGBD retea sunt cele care implementeaza modelul de date retea si care au eliminat multe din limitele celor ierarhice. Ele au
o larga aplicabilitate pt numeroase probleme din lumea reala, dar sunt dificil de utilizat datorita complexitatii ridicate (
exemplu IDMS).

SGBD relationale implementeaza modelul de date relational si au aplicabilitate in majoritatea domeniilor din lumea reala. Pot 
fi folosite de o gama larga de utilizatori datorita facilitatilor oferite (generatoare, limbaj neprocedural etc). Exemple: 
Oracle, Visual FoxPro, Paradox, Acces, Informix, Progress
SGBD orientate obiect sunt cele care implementeaza modelul de date orientat obiect. Ele se preteaza bine la problemele foarte 
mari, de complexitate ridicata, precum si pentru tipurile noi de aplicatii (proiectarea asistata, multimedia, sisteme deschise)
Exemple: O2, Orion, Jasmin.

Note. 
Majoritatea SGBD-urilor actuale au implementate, in ultimele versiuni, facilitati de tratare a obiectelor. Exemple: SQL
Server, DB2, Oracle, Access, Visual FoxPro. Tipurile de mai sus de SGBD-uri, avand drept criteriu modelul de date implemen-
tat, sunt de baza (fundamentale). 
Pornind de la acestea, prin extensia tehnologiei informatiec, exista si alte tipuri de SGBD-uri: deductive, distribuite,
multimedia, spatiale, etc.
Exista, de asemenea, tipuri de SGBD-uri (ca de exemplu cele functionale) care se bazeaza pe alte modele de date decat cele
de mai sus. Acestea au insa o raspandire mai restransa avand performante doar pentru domenii bine precizate.

4) Dupa localizarea bazei de date
SGBD centralizate sunt cele care gestioneaza datele amplasate intr-o singura baza de date centrala. La acestea au acces toti
utilizatorii autorizati pentru a efectua diferite operatii de manipulare a datelor. Toate calculatoarele care nu sunt legate 
in retea si lucreaza cu baze de date au instalat un SGBD centralizat. Tot un SGBD centralizat, dar cu facilitati de lucru
in retea trebuie instalat si in retelele de calculatoare care au plasata baza de date pe un singur calculator (de obicei pe
server). exemplu: visual foxpro, access.

SGBD distribuite sunt cele care gestioneaza datele amplasate pe mai multe calculatoare dintr-o retea tratandu-le ca un tot 
unitar. Complexitatea acestor SGBD-uri este ridicata, avand componente speciale pentru realizarea conexiunilor si tratarea
distribuita a datelor (exemplu: Oracle, DB2, Informix).

ARHITECTURI DE SGBD
- exista 2 arhitecturi de referinta: cea propusa de grupul CODASYL si cea ANSI/SPARC
In ultimul timp, arhitectura de SGBD a evoluat spre o config. cu 3 categorii de componente 
(nucleul, interfata, instrumentele(, situatie intalnita la ultimele versiuni de sisteme comerciale.
O alta tendinta este data de arhitecturile distribuite si orientate obiect de SGBD care sunt
tot mai des utilizate in contextul de retea de calculatoare si noile tipuri de aplicatii infor-
matice. Arhitectura pe componente(niveluri) reflecta tendinta actuala de structurare a SGBD-urilor.


SGBD = interfete <-> nucleu(kernel) <-> instrumente (tooklkit) <-> BD

Nucleul (motorul) contine:
- limbajul de descriere a datelor (LDD);
- limbajul de manipulare a datelor (LMD);
- componente obligatorii in kit-ul minim de SGBD
Componenta este destinata analistilor, programatorilor si administratorilor BD.

Interfetele sunt formate din:
- generatoarele de diferite tipuri (de meniuri, de videoformate, de rapoarte etc)
- elementele de CASE (Computer Aidede Software Engineering)
- interfete cu limbaje de programare universale, interfete cu alte sisteme etc
Componenta este destinata tuturor categoriilor de utilizatori: finali, intensivi, specialisti

Instrumentele sunt formate din:
- editoarele;
- navigatoarele;
- utilitarele (shells) de diferite tipuri
- Componenta este destinata, in principal, administratorului bazei de date, dar si altor cate-
gorii de utilizatori;

Concluzii
Arhitectura pe niveluri este simpla dar completa:
- Arhitecturile standardizate (CODASYL si ANSI) pot fi aduse pe cele 3 niveluri
- Noile tehnologii de bd (de exemplu tehnologia orientata obiect) au determinat aparitia unor
noi tipuri de SGBD. Arhitecturile propuse pentru acestea pot fi adaptate pe cele 3 niveluri.
- Noile tehnologii informatice (de exemplu multimedia, internet etc) au interferat cu tehnologia
bd rezultand SGBD-uri derivate corespunzatoare. Pt acestea s-au propus arhitecturi care, insa, 
pot fi adaptate la structurarea pe 3 niveluri.

Componentele nucleului:
- Comenzi de deschidere date -> Componente LDD -> (Mecanismul de Gestionare date) -> Catalog DD
- Comenzi privilegiate -> Procesor runtime -> (Mecanismul de Gestionare date) -> Catalog DD &
Obiect de BD
- Cereri de date -> Procesor de cereri -> Procesor runtime -> (Mecanismul de Gestionare de Date) 
-> Obiect de BD & Catalog DD
Program de aplicatie -> Precompilatorul -> Componenta DML & Compilator limba gazda -> BD

Functiile componentelor
- Accesul la BD (obiecte + DD) este controlat de o componenta denumita gestionarul de date ->
poate utiliza functii la nivel scazut oferite de SO sau poate utiliza propriile sale functii 
de gestiune a datelor.
- Compilatorul LDD face posibila utilizarea unor comenzi specifice de definitie si intretinere
DD
- Procesorul run-time executa operatii de regasire, act.
- Procesorul de cereri trateaza cererile interactive exprimate in LMD
- Precompilatorul prelucreaza comenzile de manipulare incluse intr-un program de aplicatie 
scris in limbaj gazda. Aceste comenzi sunt transmise compilatorului LMD in scopul generarii
modului pentru accesul la BD. Restul comenzilor din PA sunt prelucrate de compilatorul limbajului
gazda. Cele doua tipuri de componente ale PA pot forma o tranzactie asupra BD.

Functiile principale ale nucleului SGBD
- organizarea fisierelor (metode de organizare, clusteri);
- mecanisme de acces (indecsi simpli, indecsi drept arbori-B);
- management tranzactii (controlul concurentei si consistentei datelor);
- management DD;
- management cererilor (optimizarea accesului );
- protectia datelor.

Advanced Database Systems
DBA -> Comenzi specifice pentru administrare -> Evaluator la momentul executiei -> Manager
de tranzactii si de blocuri
DBA -> Comenzi DDL -> Compilator DDL -> Manager de tranzactii si de blocuri
Utilizatori intensivi -> Comenzi DDL -> Compilator DDL -> Manager de tranzactii si de blocuri
Dezvoltatori de aplicatii (programatori) -> Pachete de programe, aplicatii -> Precompilatoare
-> Comenzi DML -> Compilator de cereri -> Plan de executie a cererii -> Evaluator la momentul
executiei -> Manager de tranzactii si de blocuri
Dezvoltatori de aplicatii (programatori) -> Pachete de programe, aplicatii -> Precompilatoare
-> Compilator limba gazda -> (controleaza accesul la BD) -> Manager de tranzactii si de blocuri
(Controleaza Accesul la BD)

Compilator DDL && (Compilator de cereri -> Plan de executie a cererii -> Evaluator la momentul 
executiei -> Manager de tranzactii si de blocuri) && Compilator limba gazda -> Manager de
tranzactii si de blocuri => Dictionar al BD, Obiecte ale BD

Functiile componentelor
- DBA implementeaza schema si subschemele din BD intr-un DDL care este procesat de un 
compilator DDL.
- Utilizatorii fac cereri fie incluse in cod procedural (proceduri/functii stocate sau nu)
care sunt compilate de compilatorul de cereri.
- Cererea este analizata sintactic si lexical folosind informatii din dictionarul de date si
este optimizata pentru executie eficienta (optimizator de cereri).
- Un plan de executie este de obicei reprezentat ca un arbore de operatii (cu informatii 
suplimentare) despre metodele de acces folosite. Planul de executie a cererii este trimis in
momentul executiei la un evaluator
- Pentru cereri ad-hoc aceasta analiza si evaluare se face imediat. Pt cereri incluse in 
programe, aceasta se intampla cand cursorul asociat cererii este deschis.
- Evaluatorul la momentule executiei este de obicei un interpretor pentru o forma a alg. rel.
(impreuna cu metodele de acces si instr de executie a operatorilor).
- In timp ce evalueaza cererea, aceasta componenta acceseaza BD prin componente pentru controlul
/accesul concurent la datele din BD.
- Se implementeaza controlul concurential, managementul tranzactiilor, metode de acces la date, 
etc

Sisteme de baze de date
Sistemul de baza de date (SBD) = un ansamblu de elemente interconditionate care contribuie la
realizarea si exploatarea unei aplicatii cu baze de date
Arhitectura unui SBD = prezentarea grafica a elementelor unui SBD si a legaturilor dintre ele.

SBD - arhitectura pe componente
Arhitectura pe componente da o imagine asupra tuturor elementelor consitutive ale unui SBD si 
a interdependentei dintre ele
Date <-> Software <-> Elemente Auxiliare, Utilizatori
Din aceasta arhitectura rezulta componentele unui SBD:
1. Datele organizate intr-o baza de date care contine:
- colectiile de date propriu-zise;
- dictionarul de date;
- fisierele anexe;

2. Software-ul aferent realizarii si exploatarii bazei de date, care contine:
- sistemul de gestiune a bazelor de date(SGBD)
- programele de aplicatie
3. Elementele auxiliare sunt componente care contribuie la realizarea si functionarea 
intregului SBD:
- set de proceduri automate(rutine) si manuale
- reglementari legale si administrative
- mijloace hardware utilizate
- personalul implicat pe categorii de utilizatori


























